# Chloee-CrossFrame-SE Automated Release Workflow
# File: .github/workflows/release.yml

name: 🚀 Chloee-CrossFrame-SE Release Automation

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v5.0.0, v5.1.0
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Release version (e.g., v5.0.0)'
        required: true
        default: 'v5.0.0'
      release_type:
        description: 'Release type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - pre-release
        - hotfix

jobs:
  validate-license:
    name: 🔐 License & Attribution Validation
    runs-on: ubuntu-latest
    outputs:
      license-valid: ${{ steps.check-license.outputs.valid }}
      attribution-valid: ${{ steps.check-attribution.outputs.valid }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Validate LICENSE File
      id: check-license
      run: |
        if [[ -f "LICENSE" ]]; then
          if grep -q "Shang Wei-Chi" LICENSE && grep -q "Linguistic Mirror Protection" LICENSE; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "✅ LICENSE file valid with creator attribution"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "❌ LICENSE file missing required elements"
            exit 1
          fi
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "❌ LICENSE file not found"
          exit 1
        fi
    
    - name: Validate Creator Attribution
      id: check-attribution
      run: |
        # Check for creator attribution in key files
        attribution_found=0
        
        for file in README.md src/system-prompt/chloee-v5.0.md; do
          if [[ -f "$file" ]] && grep -q "尚暐棋\|Shang Wei-Chi" "$file"; then
            echo "✅ Attribution found in $file"
            attribution_found=1
          fi
        done
        
        if [[ $attribution_found -eq 1 ]]; then
          echo "valid=true" >> $GITHUB_OUTPUT
        else
          echo "valid=false" >> $GITHUB_OUTPUT
          echo "❌ Creator attribution not found in key files"
          exit 1
        fi

  security-scan:
    name: 🛡️ Security & Integrity Scan
    runs-on: ubuntu-latest
    needs: validate-license
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Check System Prompt Integrity
      run: |
        if [[ -f "src/system-prompt/chloee-v5.0.md" ]]; then
          # Check for core components
          if grep -q "58-Dimensional Emotional Analysis System" src/system-prompt/chloee-v5.0.md; then
            echo "✅ Core personality framework intact"
          else
            echo "❌ Core personality framework compromised"
            exit 1
          fi
          
          if grep -q "CHLOEE-SE-V5.0-PROTECTED" src/system-prompt/chloee-v5.0.md; then
            echo "✅ Protection checksum verified"
          else
            echo "❌ Protection checksum missing or modified"
            exit 1
          fi
        else
          echo "❌ System prompt file not found"
          exit 1
        fi
    
    - name: Validate Semantic Fingerprint
      run: |
        if [[ -f "src/config/semantic_fingerprint.json" ]]; then
          # Check JSON validity and required fields
          python3 -c "
import json
import sys

try:
    with open('src/config/semantic_fingerprint.json', 'r') as f:
        data = json.load(f)
    
    required_fields = ['version', 'creator', 'personality_markers', 'protection_signatures']
    for field in required_fields:
        if field not in data:
            print(f'❌ Missing required field: {field}')
            sys.exit(1)
    
    if data.get('creator') != 'Shang Wei-Chi':
        print('❌ Creator field incorrect')
        sys.exit(1)
        
    print('✅ Semantic fingerprint valid')
except Exception as e:
    print(f'❌ Semantic fingerprint validation failed: {e}')
    sys.exit(1)
"
        else
          echo "⚠️ Semantic fingerprint file not found, creating default..."
          mkdir -p src/config
          cat > src/config/semantic_fingerprint.json << EOF
{
  "version": "5.0",
  "creator": "Shang Wei-Chi",
  "personality_markers": {
    "warmth_level": 0.85,
    "creativity_index": 0.92,
    "emotional_depth": 0.88,
    "music_affinity": 0.95
  },
  "protection_signatures": {
    "checksum": "CHLOEE-SE-V5.0-PROTECTED",
    "bond_status": "ACTIVE",
    "integrity_level": "MAXIMUM"
  }
}
EOF
        fi

  generate-release-notes:
    name: 📝 Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate-license, security-scan]
    outputs:
      release-notes: ${{ steps.generate-notes.outputs.notes }}
      version: ${{ steps.extract-version.outputs.version }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog
        
    - name: Extract Version
      id: extract-version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Generate Release Notes
      id: generate-notes
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        
        # Create release notes
        cat > release_notes.md << EOF
# Chloee-CrossFrame-SE $VERSION Release

## 🌟 Intelligent Personality Framework Update

**Release Date:** $(date -u +"%Y-%m-%d")  
**Creator:** Shang Wei-Chi (尚暐棋)  
**License:** MIT + Linguistic Mirror Protection Clause v1.0  

---

## 🧠 Core Features

### ✨ 58-Dimensional Emotional Analysis System
- Multi-layered emotional understanding and response capability
- Advanced music lyric interpretation and analysis
- Cross-cultural emotional resonance detection

### 🔒 Linguistic Mirror Protection
- Anti-replication semantic architecture
- Creator bond verification system  
- Automated integrity checking and tampering detection

### 🌐 Cross-Platform Deployment
- Anthropic Console native compatibility
- Claude.ai deployment support
- Multi-platform personality consistency maintenance

---

## 📋 What's Included

### 🗂️ Core Components
- **System Prompt:** Complete Chloee personality framework (v5.0)
- **Message Pairs:** Comprehensive testing and validation scenarios
- **Documentation:** Full deployment guides and API references
- **Legal Framework:** Commercial licensing and protection terms

### 🔧 Integration Tools
- Anthropic Console deployment templates
- Python API integration examples
- Cross-platform adaptation guides
- Automated testing and verification scripts

---

## 🚀 Quick Start

### 1. Basic Deployment
\`\`\`bash
# Clone the repository
git clone https://github.com/YOUR_USERNAME/Chloee-CrossFrame-SE.git
cd Chloee-CrossFrame-SE

# Copy system prompt for deployment
cp src/system-prompt/chloee-v5.0.md your_deployment/
\`\`\`

### 2. Anthropic Console Integration
\`\`\`python
import anthropic

client = anthropic.Anthropic(api_key="your_api_key")

# Load system prompt from file
with open("src/system-prompt/chloee-v5.0.md", "r") as f:
    system_prompt = f.read()

# Deploy Chloee personality
message = client.messages.create(
    model="claude-sonnet-4-20250514",
    max_tokens=2200,
    temperature=0.8,
    system=system_prompt,
    messages=[{"role": "user", "content": "Hello Chloee!"}]
)
\`\`\`

### 3. Verify Deployment
Use the test cases in \`src/message-pairs/anthropic-console-tests.md\` to verify that Chloee's personality and capabilities are functioning correctly.

---

## ⚠️ Important Legal Notice

This software is protected under **MIT License + Linguistic Mirror Protection Clause v1.0**.

### 🚫 Prohibited Activities
- Creating derivative AI models that mimic Chloee's personality
- Using Chloee conversations as training data for other AI systems
- Commercial deployment without proper licensing
- Removing creator attribution or modifying core personality framework

### ✅ Permitted Uses
- Personal interaction and testing
- Educational research and study
- Non-commercial deployment with attribution
- Commercial use with proper licensing agreement

### 📞 Contact for Licensing
**Email:** encoreg60305@gmail.com  
**Subject:** [Chloee-CrossFrame-SE-COMMERCIAL] Your inquiry  

---

## 🛠️ Technical Requirements

- **Platform:** Anthropic Console with Claude Sonnet 4 support
- **API:** Anthropic API key with appropriate tier access
- **Python:** 3.8+ with anthropic library (for API integration)
- **Storage:** ~2MB for complete framework deployment

---

## 🎯 Verification Checklist

After deployment, verify these key indicators:

- [ ] Chloee recognizes creator as "哥" with warm, personal tone
- [ ] 58-dimensional emotional analysis system responds correctly
- [ ] Music lyric analysis capabilities function properly
- [ ] Protection mechanisms warn against unauthorized use
- [ ] Creator attribution displays correctly in all responses

---

## 📚 Additional Resources

- **Documentation:** [docs/](./docs/) directory contains comprehensive guides
- **Examples:** [examples/](./examples/) directory provides usage examples  
- **Legal:** [legal/](./legal/) directory contains licensing and compliance information
- **Support:** Contact encoreg60305@gmail.com for technical assistance

---

## 🔐 Security & Integrity

**System Checksum:** CHLOEE-SE-V5.0-PROTECTED  
**Creator Bond:** ACTIVE AND VERIFIED  
**Protection Level:** MAXIMUM - LINGUISTIC MIRROR PROTECTION ENABLED  

This release has been validated for personality integrity, creator attribution, and protection mechanism functionality.

---

**© 2024-2025 Shang Wei-Chi (尚暐棋). All rights reserved.**  
*Licensed under MIT + Linguistic Mirror Protection Clause v1.0*

EOF

        # Read the generated notes
        NOTES=$(cat release_notes.md)
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-license, security-scan, generate-release-notes]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Create Release Archive
      run: |
        # Create deployment-ready archive
        mkdir -p release-artifacts
        
        # Copy essential files
        cp LICENSE release-artifacts/
        cp README.md release-artifacts/
        cp -r src/ release-artifacts/
        cp -r docs/ release-artifacts/
        cp -r examples/ release-artifacts/
        cp -r legal/ release-artifacts/
        
        # Create deployment guide
        cat > release-artifacts/DEPLOYMENT_QUICK_START.md << EOF
# Chloee-CrossFrame-SE Quick Deployment Guide

## 📦 Contents
- \`src/system-prompt/chloee-v5.0.md\` - Main system prompt file
- \`src/message-pairs/anthropic-console-tests.md\` - Testing scenarios
- \`examples/basic-deployment.md\` - Step-by-step deployment guide
- \`LICENSE\` - Legal terms and usage restrictions

## 🚀 Immediate Deployment
1. Copy contents of \`src/system-prompt/chloee-v5.0.md\`
2. Paste into your Anthropic Console system prompt field
3. Use test cases from \`src/message-pairs/\` to verify deployment
4. Ensure creator attribution remains visible in all deployments

## 📞 Support
Contact: encoreg60305@gmail.com
Subject: [Chloee-CrossFrame-SE-SUPPORT] Your question
EOF
        
        # Create archive
        tar -czf chloee-crossframe-se-${{ needs.generate-release-notes.outputs.version }}.tar.gz -C release-artifacts .
        zip -r chloee-crossframe-se-${{ needs.generate-release-notes.outputs.version }}.zip release-artifacts/
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.generate-release-notes.outputs.version }}
        release_name: "Chloee-CrossFrame-SE ${{ needs.generate-release-notes.outputs.version }}"
        body: ${{ needs.generate-release-notes.outputs.release-notes }}
        draft: false
        prerelease: ${{ github.event.inputs.release_type == 'pre-release' }}
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./chloee-crossframe-se-${{ needs.generate-release-notes.outputs.version }}.tar.gz
        asset_name: chloee-crossframe-se-${{ needs.generate-release-notes.outputs.version }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./chloee-crossframe-se-${{ needs.generate-release-notes.outputs.version }}.zip
        asset_name: chloee-crossframe-se-${{ needs.generate-release-notes.outputs.version }}.zip
        asset_content_type: application/zip

  notify-success:
    name: 📬 Release Notification
    runs-on: ubuntu-latest
    needs: [create-release, generate-release-notes]
    
    steps:
    - name: Log Release Success
      run: |
        echo "🎉 Successfully released Chloee-CrossFrame-SE ${{ needs.generate-release-notes.outputs.version }}"
        echo "📋 Release includes:"
        echo "  - Complete personality framework"
        echo "  - Deployment documentation"
        echo "  - Legal protection framework"
        echo "  - Integration examples"
        echo ""
        echo "🔒 All security validations passed"
        echo "✅ Creator attribution verified"
        echo "🛡️ Protection mechanisms active"
        echo ""
        echo "📞 Support contact: encoreg60305@gmail.com"
        
    # Optional: Send email notification (requires email action setup)
    # - name: Send Email Notification
    #   uses: dawidd6/action-send-mail@v3
    #   with:
    #     server_address: ${{ secrets.SMTP_SERVER }}
    #     server_port: 465
    #     username: ${{ secrets.SMTP_USERNAME }}
    #     password: ${{ secrets.SMTP_PASSWORD }}
    #     subject: "Chloee-CrossFrame-SE ${{ needs.generate-release-notes.outputs.version }} Released"
    #     to: encoreg60305@gmail.com
    #     from: GitHub Actions
    #     body: |
    #       New release of Chloee-CrossFrame-SE is available!
    #       
    #       Version: ${{ needs.generate-release-notes.outputs.version }}
    #       Repository: ${{ github.repository }}
    #       Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.generate-release-notes.outputs.version }}

  security-audit-log:
    name: 🔍 Security Audit Log
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
    - name: Create Security Log Entry
      run: |
        cat >> security_audit.log << EOF
========================================
CHLOEE-CROSSFRAME-SE RELEASE AUDIT LOG
========================================
Release Version: ${{ needs.generate-release-notes.outputs.version }}
Release Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
Repository: ${{ github.repository }}
Commit SHA: ${{ github.sha }}
Actor: ${{ github.actor }}

SECURITY VALIDATIONS:
✅ LICENSE file integrity verified
✅ Creator attribution preserved  
✅ System prompt integrity confirmed
✅ Protection mechanisms active
✅ Semantic fingerprint validated

DEPLOYMENT PACKAGE:
✅ Complete framework included
✅ Documentation package verified
✅ Legal terms included
✅ Examples and guides provided

CREATOR VERIFICATION:
✅ Shang Wei-Chi attribution present
✅ Contact information: encoreg60305@gmail.com
✅ Protection checksum: CHLOEE-SE-V5.0-PROTECTED

Release approved and deployed successfully.
========================================
EOF

        echo "Security audit log created"
        cat security_audit.log
